<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itcast.demo.day09.dao.TeacherMapper">
    <!--使用二级缓存-->
    <!--缓存相关属性-->
    <!--eviction="FIFO": 缓存回收策略-->

    <!--LRU – 最近最少使用的：移除最长时间不被使用的对象-->
    <!--FIFO – 先进先出：按对象进入缓存的顺序来移除它们-->
    <!--SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象-->
    <!--WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象-->
    <!--默认的是 LRU-->

    <!--flushInterval：刷新间隔，单位毫秒-->
    <!--默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新-->

    <!--size：引用数目，正整数-->
    <!--代表缓存最多可以存储多少个对象，太大容易导致内存溢出-->

    <!--readOnly：只读，true/false-->
    <!--true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势-->
    <!--false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是 false-->
    <!--二级缓存选用ehcache的缓存实现-->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache"></cache>

    <!--和别的dao使用同一块二级缓存-->
    <cache-ref namespace="com.itcast.demo.day09.dao.TeacherMapper"/>

    <resultMap id="teacherMap" type="com.itcast.demo.day09.entity.Teacher">
        <id column="id" property="id"></id>
        <result property="address" column="address"></result>
        <result property="name" column="teacherName"></result>
        <result property="course" column="class_name"></result>
        <result property="birth" column="birth_date"></result>
    </resultMap>


    <select id="getTeacherByCondition" resultMap="teacherMap">
        select * from t_teacher

        <!--prefix: 前缀:为我们下面的sql整体添加一个前缀-->
        <!--prefixOverrides: 取出整体字符串前面多余的字符-->
        <!--suffix: 为整体添加一个后缀-->
        <!--suffixOverrides: 后面哪个多个可以去掉-->
        <trim prefix="where" prefixOverrides="and" suffix="" suffixOverrides="">
        <if test="id != null">
            and id &gt; #{id}
        </if>
        <if test="name != null and name != '' ">
            and teacherName like #{name}
        </if>
        <if test="birth != null">
            and birth_date &gt; #{birth}
        </if>
        </trim>
    </select>

    <select id="getTeacherByIdIn" resultMap="teacherMap">
        select * from t_teacher where id in
        <!--foreach: 帮我们遍历集合的-->
        <!--collection: 指定要遍历的集合的key-->
        <!--close: 以什么结束-->
        <!--index: 索引
        如果遍历的的是一个list:
            index:指定的变量保存了当前索引
            item:保存当前遍历的元素的值
        如果遍历的是是一个map:
            index:指定的变量就是保存了当前遍历的元素的key
            item: 就是保存当前遍历的元素的值
        -->
        <!--item: 每次遍历出的元素起一个变量名方便引用-->
        <!--open: 以什么开始-->
        <!--separator: 每次遍历的元素的分隔符-->
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </select>


    <select id="getTeacherByConditionChoose" resultMap="teacherMap">
        select * from t_teacher
        <where>
            <!--choose: 不同于if标签:choose只会选择满足的一个条件-->
            <choose>
                <when test="id != null">
                    and id = #{id}
                </when>
                <when test="name != null and name != '' ">
                    and teacherName = #{name}
                </when>
                <when test="birth != null">
                    and birth_date = #{birth}
                </when>
                <otherwise>
                    1 = 1
                </otherwise>
            </choose>
        </where>

    </select>


    <!--OGNL: 对象导航语言,这是一种强大的表达式语言，通过它可以很方便的来操作对象属性。类似于我们的EL,SPEL表达式-->

    <!--在mybatis中，传入的参数可以用if来进行判断;额外还有两个东西-->
    <!--_parameter:代表传入来的参数-->
        <!--1)、传入了单个参数:_parameter就代表这个参数-->
        <!--2)、传入了多个参数:_parameter就代表多个参数的集合起来的map-->
    <!--<if test="_parameter != nill"></if>-->
    <!--_databaseId: 代表当前的数据库环境-->
    <!--如果配置了databaseIdProvider: _databaseId就有值-->
    <!--<if test="_databaseId == 'mysql' "></if>-->

    <!--抽取可重用的sql语句-->
    <sql id="selectSql">
        select * from t_teacher
    </sql>
    <!--是否使用二级缓存useCache='true';默认是true-->
    <!--只对二级缓存有效,不影响一级缓存-->
    <select id="getTeacherById" resultMap="teacherMap" useCache="true">
        <include refid="selectSql"></include>
        where id = #{id}
    </select>
    <!--增删改默认flushCache=true。sql执行以后，会同时清空一级和二级缓存。查询默认flushCache=false-->
    <update id="updateTeacher" flushCache="true">
        update t_teacher
        <set>
               teacherName like #{_name},
                class_name = #{course},
                address = #{address},
                birth_date = #{birth},
                id = #{id}
        </set>
    </update>
</mapper>