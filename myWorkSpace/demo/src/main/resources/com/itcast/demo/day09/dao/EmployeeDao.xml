<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace:名称空间;写接口的全类名;相当于告诉mybatis这个配置文件是实现哪个接口的-->
<mapper namespace="com.itcast.demo.day07.EmployeeDao">
    <!--select:用来定义一个查询操作-->
    <!--id:方法名:相当于这个配置是对于某个方法的实现-->
    <!--resultType: 指定方法运行后的返回值类型(查询操作必须指定的)-->
    <!--#{属性名}:代表取出传递过来的某个参数的值-->
    <select id="getEmpById" resultType="com.itcast.demo.day07.Employee" >
        <!--sql语句不要写分号-->
        select * from t_employee where id = #{id}
    </select>

























    <!--namespace="com.itcast.demo.day07.EmployeeMapper:写dao接口的全类名-->
<!--这个文件中能写的全部标签
cache :和缓存有关
cache-ref : 和缓存有关
delete、update、insert、select : 增删改查
parameterMap : 参数map:废弃的。原本是用来做复杂参数的映射
resultMap: 结果映射:自定义结果集的封装规则
sql: 抽取可重用的sql
-->

<!--delete、update、insert、select 所拥有的属性-->



-->
    <!--useGeneratedKeys和keyProperty配合使用实现获取插入到数据库后的自增Id-->
    <!--让Mybatis自动的将自增Id赋值给传入的Employee对象的Id属性-->
    <!--useGeneratedKeys="true" 原生jdbc获取自增主键的方法  collection的getGeneratedKeys()方法-->
    <!--keyProperty="id" :将刚才自增的Id封装给哪个属性-->
    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        <!-- 查询主键-->
        <!-- order="BEFORE": 在核心sql语句执行之前先运行一个查询sql查到Id-->
        <!-- keyProperty="id" 将查到的Id赋值给javaBean的哪个属性-->
    <selectKey order="BEFORE" keyProperty="id" resultType="java.lang.Integer">
       // select max(id) + 1 from t_employee
        SELECT LAST_INSERT_ID();
    </selectKey>
        insert into t_employee(empname,gender,email)
        values (#{empname},#{gender},#{email})
    </insert>

    <update id="update">

    </update>

    <delete id="delete">

    </delete>



    <select id="selectByIdAndName" resultType="com.itcast.demo.day07.Employee">
        select * from t_employee
        where id = #{0} and name = #{1}
        select * from t_employee
        where id = #{param1} and name = #{param2}
        select * from t_employee
        where id = #{id} and name = #{name}
    </select>

    <!--现象：
    1)单个参数：
        基本类型:
            取值: #{随便写},最好写成参数名
    2)多个参数
        取值: #{参数名}无效了
        可用: 0,1(参数的索引) 或者 param1,param2(第几个参数paramN)
        原因:只要传入了多个参数,mybatis会自动将这些参数封装在一个map中,
        封装时使用的key就是参数的索引和参数的第几个表示。
        #{key}就是从这个map中取值
        我们可以告诉mybatis,封装参数map的时候别乱来,使用我们制定的key
        可以使用@Param注解为参数指定key,命名参数

     3)传入了POJO(javaBean)
        取值: #{POJO的属性名}

     4)传入了map: 将多个要使用的参数封装起来
        取值: #{map的key}

     5)扩展:多个参数:自动封装Map
     method01(@Param("id") Integer id,String empName,Employee employee)
     Integer id -> #{id}
     String empName -> #{param2}
     Employee employee(取出这个对象里面的email属性)  -> #{param3.email}
    -->

    <select id="select" resultType="com.itcast.demo.day07.Employee">
        select * from t_employee
        where id = #{id,jdbcType=INTEGER} and name = #{name,jdbcType=VARCHAR}
    </select>
    <!--
    #{key}取值的时候可以设置一些规则:
        id = #{id,jdbcType=INTEGER};
        javaType、jdbcType、mode、numericScale、resultMap、typeHandler、jdbcTypeName、expression
        只有jdbcType才可能是需要被指定的:
            默认不指定jdbcType;mysql没问题;oracle也没问题;
            万一传入的数据为null;
            mysql插入null没问题;oracle不知道null到底是什么类型

        实际上在mybatis中，有两种取值方式:
        #{属性名}:是参数预编译的方式，参数的位置都是用?替代。参数都是后来预编译设置进去的;安全,不会有sql注入问题
        ${属性名}:不是参数预编译,而是直接和sql语句进行拼串;不安全
        sql语句只有在参数位置是支持预编译的
        一般是使用#{}来进行参数的取值,安全。在不支持参数预编译的位置要进行取值就使用${}
        比如我们动态的去获取表名或者列名时，可以采用${}的方式取值
    -->
    <!--resultType: 如果返回的是集合,写的是集合里面元素的类型-->
    <select id="getAllEmps" resultType="com.itcast.demo.day07.Employee">
        select * from t_employee
    </select>

    <select id="getEmpByIdReturnMap" resultType="java.util.Map">
          select * from t_employee where id = #{id}
    </select>

    <select id="getAllEmpsReturnMap" resultType="com.itcast.demo.day07.Employee">
            select * from t_employee
    </select>
    
    <!--自定义结果集(resultMap): 自己定义每一列数据和javaBean的映射规则-->
    <!--type:指定为哪个javaBean自定义封装规则,类的全类名-->
    <!--id: 唯一标识: 让别人在后面引用-->
    <resultMap id="myEmp" type="com.itcast.demo.day07.Employee">
        <!--指定主键列的对应规则-->
        <!--column:指定哪一列是主键-->
        <!--property:指定employee的哪个属性封装id这一数据-->
        <id column="id" property="id"></id>
        <!--普通列-->
        <result property="age" column="age"></result>
        <result property="gender" column="gender"></result>
        <result property="name" column="name"></result>
    </resultMap>
    <!--resultMap:查出数据封装结果的时候,使用myEmp自定义的规则-->
    <select id="selectById" resultMap="myEmp">
        select * from t_employee where id = #{id}
    </select>

    <select id="getKeyById" resultMap="mykey">
        select k.id,k.keyName,k.lockId,l.id lid,l.lockName
        from t_key k left join t_lock l
        on k.lockId = l.id where k.id = #{id}
    </select>
    <!--自定义封装规则:使用级联属性疯转联合查询出的结果-->
    <!--mybatis推荐的-->
    <resultMap id="mykey" type="com.itcast.demo.day07.Key">
        <id property="id" column="id"></id>
        <result property="keyName" column="keyName"></result>
        <!--接下来的属性是一个对象,自定义这个对象的封装规则,使用association;表示；联合了一个对象-->
        <!--javaType: 指定这个属性的类型-->
        <association property="lock" javaType="com.itcast.demo.day07.Lock"></association>
        <!--定义lock属性对应的这个Lock对象如何封装-->
        <id property="id" column="lid"></id>
        <result property="lockName" column="lockName"></result>
    </resultMap>
</mapper>