<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itcast.demo.day09.dao.LockMapper">
    <select id="getLockByIdBtStep" resultMap="mylockStep">
          select * from t_lock where id = #{id}
    </select>

    <resultMap id="mylockStep" type="com.itcast.demo.day09.entity.Lock">
        <id property="id" column="id"></id>
        <result property="lockName" column="lockName"></result>
        <collection property="keys"
                    select="com.itcast.demo.day09.dao.KeyMapper.getKeysByLockId"
                    column="{id=id}" fetchType="lazy">
            <!--{key=列名}: 当调用的方法需要传入多个参数的时候,我们通过@param注解为参数起了一个名字
            这个名字就是key,是{key}获取值时使用的-->
        </collection>
    </resultMap>









    <select id="getLockById" resultMap="mylock">
        select l.*,k.id kid,k.keyname,k.lockid
        from t_lock l left join t_key k
        on l.id = k.lockid
        where l.id = #{id}
    </select>
    <resultMap id="mylock" type="com.itcast.demo.day09.entity.Lock">
        <id property="id" column="id"></id>
        <result property="lockName" column="lockName"></result>
        <!--collection:定义集合元素的封装-->
        <!--property: 指定哪个属性是集合属性-->
        <!--javaType: 指定对象类型,只能在association中使用-->
        <!--ofType: 指定集合里面元素的类型-->
        <collection property="keys" ofType="com.itcast.demo.day09.entity.Key">
            <!--标签体中指定集合中这个元素的封装规则-->
            <id property="id" column="kid"></id>
            <result property="keyName" column="keyName"></result>
        </collection>
    </resultMap>
</mapper>