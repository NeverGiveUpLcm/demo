<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd">


    <context:component-scan base-package="com.itcast.demo.day12"></context:component-scan>
    <!--<aop:aspectj-autoproxy/>-->
    <!--首先声明一个配置类,通过Bena标签将这个类注入到ioc容器中-->
    <bean id="AspectUtil" class="com.itcast.demo.day12.AspectUtil"></bean>
    <!--配置我们的aop配置-->
    <aop:config>
        <!--配置切入点,设置切入点表达式-->
        <aop:pointcut id="pointcut" expression="execution(* com.itcast.demo.day12.*.*(..))"/>
        <!--配置切面,ref指向哪个类是我们的切面类通过order配置执行顺序-->
        <aop:aspect ref="AspectUtil" order="1">
            <!--配置通知 method对应切面类中的方法,-->
            <aop:before method="before" pointcut-ref="pointcut"></aop:before>
            <aop:after-throwing method="afterThrowing" pointcut-ref="pointcut" throwing="e"></aop:after-throwing>
            <aop:after-returning method="afterReturning" pointcut-ref="pointcut"
                                 returning="result"></aop:after-returning>
            <aop:after method="after" pointcut-ref="pointcut"></aop:after>
            <aop:around method="circle" pointcut-ref="pointcut"></aop:around>
        </aop:aspect>
    </aop:config>

    <bean id="JdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg name="dataSource" ref="dataSource"></constructor-arg>
    </bean>
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="username" value="root"></property>
        <property name="password" value="root"></property>
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql://localhost:3306/mybatis.test"></property>
    </bean>
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--开启注解的事务-->
    <!--1、配置数据源-->
   <!--2、配置事务管理器-->
    <!--开启事务的注解支持-->
    <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>


    <!--基于xml的事务支持-->
    <aop:config>
        <aop:pointcut id="ponitcut" expression="execution(* com.itcast.demo.day12.*.*(..) )"/>
        <aop:advisor advice-ref="advice" pointcut-ref="ponitcut"></aop:advisor>
    </aop:config>

    <tx:advice id="advice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" isolation="REPEATABLE_READ" timeout="3" read-only="false"/>
        </tx:attributes>
    </tx:advice>





</beans>